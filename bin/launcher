#!/usr/bin/env bash

set -e # stop on errors
# set -x # turn on debugging

# understanding the Platypus UX:
#
# when clicked in the status bar, a Platypus status menu app runs (without arguments) to completion
# and displays each line of STDOUT as an option, so it's critical to complete ASAP to reduce perceived latency
#
# then when a menu item is selected, this script runs again in the background w/ the menu item text passed as an arg
# this time Platyplus app will not wait for the background run to complete before the menu can be rendered again
#
# understanding this script:
#
# check dependencies and if passing, source the main mdm functionality
# otherwise offer a single option to install dependencies when selected
#
# the depedency check should run every time in case its copied to new computer

if [[

  ${BASH_VERSINFO[0]} -ge 5 && \
  -f /usr/local/bin/brew && \
  -f /usr/local/bin/realpath && \
  -f "$HOME/.mdm/current/bin/mdm" && \
  -d /Applications/Docker.app

]]; then

  # N.B. the script is invoked as
  # `/usr/bin/env -P "/usr/local/bin:/bin" bash "/path/to/osx.app/Content/Resoources/name-of-this-script"`
  # using the upgraded /usr/local/bin/bash if found or /bin/bash.
  # however, -P does not export the path, just sets it for `env`.
  # so export PATH if necessary after tools are installed
  [[ "$PATH" =~ "/usr/local/bin" ]] || export PATH="/usr/local/bin:$PATH"

  # since the dependecies are now installed, use realpath & run current version of main script
  source "$HOME/.mdm/current/bin/mdm"

else

  # some dependency is missing and this script was called without args, so prompt user to install

  if [[ ${#BASH_ARGV[@]} -eq 0 ]]; then

    echo "Install missing requirements on this computer" && exit

  else

    installer=$(mktemp)
    curl -sL https://raw.githubusercontent.com/PMET-public/mdm/master/bin/install.sh
    chmod +x "$installer"
    open -a Terminal "$installer"

  fi

fi


