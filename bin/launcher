#!/usr/bin/env bash

set -e # stop on errors
[[ "$debug_launcher" ]] && set -x

# understanding the Platypus UX:
#
# when clicked in the status bar, a Platypus status menu app runs (without arguments) to completion
# and displays each line of STDOUT as an option, so it's critical to complete ASAP to reduce perceived latency
#
# then when a menu item is selected, this script runs again in the background w/ the menu item text passed as an arg
# this time Platyplus app will not wait for the background run to complete before the menu can be rendered again
#
# understanding this script:
#
# check dependencies and if passing, source the main mdm functionality
# otherwise offer a single option to install dependencies when selected
#
# the depedency check should run every time in case its copied to new computer
#
# also note: this launching script is invoked as
# `/usr/bin/env -P "/opt/homebrew/bin:/usr/local/bin:/bin" bash "/path/to/osx.app/Content/Resoources/name-of-launching-script"`
# using the upgraded homebrew bash if found or /bin/bash.
# however, -P does not export the path, just sets it for `env` command. so export PATH if necessary

[[ "$PATH" =~ "/opt/homebrew/bin:/usr/local/bin" ]] || export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"

is_mac() {
  # [[ "$(uname)" = "Darwin" ]]
  # matching against uname is relatively slow compared to checking for safari and the users dir
  # and if this funct is called 20x to render the menu, it makes a diff
  [[ -d /Applications/Safari.app && -d /Users ]]
}

is_CI() {
  [[ -n "$GITHUB_WORKSPACE" ]]
}

# GITHUB CI does not support docker
is_docker_compatible() {
  ! ( is_mac && is_CI )
}

if [[ -z "$MDM_REPO_DIR" ]]; then # allow repo dir to be set by env var for debugging or testing
  if [[ "$GITHUB_REPOSITORY" = "PMET-public/mdm" ]]; then
    MDM_REPO_DIR="$GITHUB_WORKSPACE"
  fi
fi

# although these vars exist in lib.sh, launcher must also have for initial self-installation of distributed app
mdm_path="$HOME/.mdm"
mdm_config_filename=".mdm_config.sh"
mdm_config_file="$mdm_path/$mdm_config_filename"

if ! is_docker_compatible; then
  echo "System is not docker compatible."
fi

missing_deps=""
if [[ ! -f "$mdm_path/current/bin/mdm" ]]; then
  missing_deps="${missing_deps}MDM not found at $mdm_path/current/bin/mdm.\n"
fi
if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
  missing_deps="${missing_deps}Bash 4+ is required.\n"
fi
if [[ -z "$(which brew)" && "$(is_mac)" ]]; then
  missing_deps="${missing_deps}Homebrew required on Mac OS.\n"
fi
if [[ -z "$(which realpath)" ]]; then
  missing_deps="${missing_deps}realpath is required.\n"
fi
if [[ -z "$(which mkcert)" ]]; then
  missing_deps="${missing_deps}mkcert is required.\n"
fi
if [[ -z "$(which jq)" ]]; then
  missing_deps="${missing_deps}jq is required.\n"
fi
if [[ -z "$(which composer)" ]]; then
  missing_deps="${missing_deps}compose is required.\n"
fi
if [[ -z "$(which docker)" ]]; then
  missing_deps="${missing_deps}docker is required.\n"
fi

if [[ -z "$missing_deps" ]]; then

  mdm_script_path="${MDM_REPO_DIR:-$mdm_path/current}/bin/mdm"
  # shellcheck source=mdm
  source "$mdm_script_path"

else

  printf "$missing_deps"

  if [[ ${#BASH_ARGV[@]} -eq 0 ]]; then # this script was called without args, so prompt user to install

    echo "Install missing requirements on this computer" && exit

  else # just run self_install from cur repo branch for development/testing OR master for normal installation

    installer=$(mktemp)
    if [[ "$MDM_REPO_DIR" ]]; then
      cp "$MDM_REPO_DIR/bin/lib.sh" "$installer"
    else
      curl -sL "https://raw.githubusercontent.com/PMET-public/mdm/master/bin/lib.sh" > "$installer"
      # when MDM_REPO_DIR exists (dev|CI), config can be accounted for (see self_install)
      # but, in an end user's app, copy current app's config to $mdm_path
      mkdir -p "$mdm_path"
      cp "$(dirname "${BASH_SOURCE[0]}")/../$mdm_config_filename" "$mdm_config_file" || :
    fi
    echo "self_install" >> "$installer" # add the self_install function at the end to auto-run
    chmod +x "$installer"
    if ! is_mac || [[ "$MDM_REPO_DIR" ]]; then
      "$installer"
    else
      open -a Terminal "$installer"
    fi
    echo "Successfully installed missing requirements on this computer"
  fi

fi
